MySQL não é um banco de dados, é um gerenciador de banco de dados. 
Ele serve para manipular tabelas através de solicitações.
Relaciona elementos.
SQL é uma linguagem usada para definir, manipular e controlar dados.

Comandos SQL:
- DDL :- CRIE, ALTERE, E APAGUE ELEMENTOS DO SGBD
- DML :- RECUPERE, INSIRA, ALTERE, APAGUE DADOS DAS TABELAS
- DCL :- DEFINE PRIVILÉGIOS DE ACESSO DE CADA USUÁRIO
 
 ENTIDADES:
-São semelhantes as classes de Java, onde elas recebem os atributos
-Podemos relaciona-las assim como em java relacionamos as classes
Utilizamos chaves primárias para criação e agrupamento das tabelas

PARA CRIAR UM SCHEMA utilizamos: create schema nome;
PARA APAGAR UM SCHEMA utilizamos: drop schema nome;

PARA CRIAR UMA TEBELA:
ALTER TABLE notas
ADD COLUMN `descricao_atividade` VARCHAR(100) NOT NULL AFTER `idnotas`, // ATRIBUTOS
ADD COLUMN `notas` DECIMAL(5,2) NOT NULL AFTER `descricao_atividade`; //ATRIBUTOS

PARA APAGAR UMA TABELA:
DROP TABLE nome
/mas antes faz o backup

TIPOS DE DADOS:
    TINYINT — número inteiro muito pequeno (tiny);
    SMALLINT — número inteiro pequeno;
    MEDIUMINT — número inteiro de tamanho médio;
    INT — número inteiro de tamanho comum;
    BIGINT — número inteiro de tamanho grande;
    DECIMAL — número decimal, de ponto fixo;
    FLOAT — número de ponto flutuante de precisão simples (32 bits);
    DOUBLE — número de ponto flutuante de precisão dupla (64 bits);
    BIT — um campo de um bit.

    CHAR — uma cadeia de caracteres (string), de tamanho fixo e não-binária;
    VARCHAR — uma string de tamanho variável e não-binária;
    BINARY — uma string binária de tamanho fixo;
    VARBINARY — uma string binária de tamanho variável;
    BLOB — um BLOB (Binary Large OBject – OBjeto Grande Binário) pequeno;
    TINYBLOB — um BLOB muito pequeno;
    MEDIUMBLOB — um BLOB de tamanho médio;
    LONGBLOB — um BLOB grande;
    TINYTEXT — uma string não-binária e de tamanho bem reduzido;
    TEXT — uma string não-binária e pequena;
    MEDIUMTEXT — uma string de tamanho comum e não-binária;
    LONGTEXT — uma string não-binária de tamanho grande;
    ENUM — de acordo com o manual do MySQL, é uma string, com um valor que precisa ser selecionado de uma lista predefinida na criação da tabela;
    SET — é um objeto que pode ter zero ou mais valores – cada um dos quais precisa ser escolhido de uma lista de valores predeterminados quando da criação da tabela.
    DATE — o valor referente a uma data no formato 'CCYY-MM-DD'. Por exemplo 1985-11-25 (ano-mês-dia). O 'CC' se refere aos dois dígitos do século (Century, em inglês);
    TIME — um valor horário no formato 'hh:mm:ss' (hora:minutos:segundos);
    TIMESTAMP — timestamp é uma sequência de caracteres ou informação codificada que identifica uma marca temporal ou um dado momento em que um evento ocorreu. No MySQL, ele tem o formato 'CCYY-MM-DD hh:mm:ss' – neste caso, seguem a padronização ISO 8601;
    YEAR — armazena um ano no formato 'CCYY' ou 'YY';

INSERIR VALORES:
INSERT INTO nome
VALUES (DEFAULT, 'nome char', 'xxxx-xx-xx','char char');
INSERT INTO alunos
VALUES (DEFAULT, 'Alef', '1999-10-22','Rua da Cadelas','Guaranésia','MG','14207260641');

ALTERAR VALORES: 
UPDATE nometabela
SET nome =  'altera'
WHERE id_aluno =1;
WHERE nome = 'Pedro Martins'

DELEÇÕES
DELETE FROM nomedatabela
WHERE id_aluno = 1;

CONSULTA:
SELECT camponome, campocpf
FROM alunos
WHERE cidade ='cidade'
ORDER BY nomes DESC

OPERADORES LÓGICOS:
 a or b
a and b

OPERADORES RELACIONAIS:
 a > b // maior
a < b / menor
a <> b //dieferente
Ex: select* '/todos
FROM alunos
WHERE  a > '1999-10-22'
seleciona todos alunos com o nascimento depois de 22 10 99

CARDINALIDADE:
mesma coisa que multiplicador de java um aluno tem varios cursos e um curso tem varios alunos mas uma nota pertece a só um aluno
Então precisamos relacioná-las criando chaves, ligamos primeira os alunos aos cursos e depois a chave de ligação destes dois ligamos a nota

INSERT INTO `alunos_cursos`
VALUES
(DEFAULT, 1,1),
(DEFAULT, 2,2),	
(DEFAULT, 3,1),	
(DEFAULT, 4,3),	
(DEFAULT, 5,1),	
(DEFAULT, 6,2),
(DEFAULT, 7,1),	
(DEFAULT, 8,1);	

INSERT INTO notas
VALUES
(DEFAULT, 1, "Prova 1", 28,0), 
(DEFAULT, 3, "Prova 1", 25,0), 
(DEFAULT, 5, "Prova 1", 28,0), 
(DEFAULT, 2, "Exercicio 1", 10,0),
(DEFAULT, 6, "Exercicio 1", 12,0),
(DEFAULT, 1, "Prova 2", 22,0),
(DEFAULT, 2, "Prova 2", 20,0);


